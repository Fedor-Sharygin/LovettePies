//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Player/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Restaurant Controls"",
            ""id"": ""b249361f-37e2-4326-b925-ff7c334e7aa6"",
            ""actions"": [
                {
                    ""name"": ""AreaNavigation"",
                    ""type"": ""Value"",
                    ""id"": ""29ededec-b4c7-4d88-8af7-cd9722b637a7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MainAction"",
                    ""type"": ""Button"",
                    ""id"": ""26fe1650-8105-46e0-ba0b-aadc461f8eae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""f2cdbfa0-646b-4ed6-a36c-fdbc2c360a72"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD Controls"",
                    ""id"": ""3cd1726b-e2ad-4054-8bf4-fd668a564b5b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AreaNavigation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9c816352-5d50-4090-844c-6f793d3345ce"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AreaNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b1047ab5-2e37-44aa-98db-a116569041c8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AreaNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""af35ae4a-26fd-4087-88a1-02efce0bda8f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AreaNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4caf464e-b231-4677-8728-58de0d794238"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AreaNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow Controls"",
                    ""id"": ""6655fa83-8a45-43a1-94d4-7993aeebcc1c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AreaNavigation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6c3a94cd-a585-418e-b0d1-0fc6cc886dbf"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AreaNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""bad6c67c-942a-40e3-8e68-b8e2b5cfa07f"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AreaNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""963d5708-52df-48b6-9455-445aba183acb"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AreaNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d7e60012-b69b-4ff8-bad8-c789b58bfc6b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AreaNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""07379d44-e0a0-4212-a7fe-99723c2821fc"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AreaNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""D-Pad [Gamepad]"",
                    ""id"": ""16a4b4c2-07ed-483f-a60f-2ef5f50344c9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AreaNavigation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6a533c07-02cd-4bfb-8aa8-12b54ce488d8"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AreaNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f56735a5-9c10-48e0-9963-8fbaf5fb4f0b"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AreaNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4b2235b3-0a5c-4dd5-afb6-02e83b61e932"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AreaNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4b0e8608-d7ea-46c7-a7e5-692c09355456"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AreaNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1450f0e5-eb41-4fe8-bbd3-d0aaf72ebe00"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MainAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f655fcd-1999-46d6-abe2-23cf153e6628"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MainAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac8f3121-adf1-4ec9-b370-a6af3fac4c1a"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MainAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""571e9488-1e42-4a7b-af43-5406c3038edd"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MainAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1417dd3c-c35b-424b-815a-3a3356ae5bdd"",
                    ""path"": ""<SwitchProControllerHID>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MainAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d23a5db1-acae-4587-b9a8-e535de7e858a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""00f6b518-b9f0-4650-88e7-9f1b6a649c65"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ff31ee2-68d5-4739-8cb3-a1f358f1d73a"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Barbershop Controls"",
            ""id"": ""afcbf1be-c7e7-4dbd-bf9c-28e3782ec883"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""31e8575e-0b42-4915-9008-0e6b7e60bc10"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a69fe0e9-7131-437e-944b-f0a3e5e3ffea"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Conversation Controls"",
            ""id"": ""bfcd958b-2d5f-4303-8e01-41eb8c324a2e"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""c0be6aef-17b3-4fb2-b8c8-1c8d8ef12a57"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""80bab939-4d1f-460b-9d21-09b37140232d"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Basic Minigame Controls"",
            ""id"": ""124e5c38-d908-459d-9423-fe52e12ce1ee"",
            ""actions"": [
                {
                    ""name"": ""Mouse Press"",
                    ""type"": ""Button"",
                    ""id"": ""86df978d-3995-4c41-9699-207b6c2c9073"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Basic Press"",
                    ""type"": ""Button"",
                    ""id"": ""ce7a56f2-d876-4963-966b-032465e49996"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Alternate Press"",
                    ""type"": ""Button"",
                    ""id"": ""f0433bc3-aa37-463d-99f4-1aab0064e6f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Controller Movement Left"",
                    ""type"": ""Value"",
                    ""id"": ""9d57f9ca-0374-43cd-8e75-c6ed7d72493f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Controller Movement Right"",
                    ""type"": ""Value"",
                    ""id"": ""6020b188-d222-47f2-8bca-1459e3bde38a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Quit Minigame"",
                    ""type"": ""Button"",
                    ""id"": ""330f69da-3ec4-497b-912e-5a5fe6c60d9e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e01a37d5-c248-433d-9baf-c9050ec2a890"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Basic Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""213c70d2-bc45-494c-bd9a-9f01e12161f2"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Basic Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""59c81f76-75d0-4ac4-8f4f-f943860fff16"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Controller Movement Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9fae0db2-7dca-453b-bf20-d9fb3290a208"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Controller Movement Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c26ca59-138e-4643-807b-4a6e6d291829"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Quit Minigame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8cc91dae-0cc3-4017-a4e5-1df353af91e3"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Quit Minigame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b2da8e4-7d3d-4d52-9527-d260b3f16c07"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ae77a3fd-3079-4eeb-b989-ae0660b69268"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Alternate Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c1f48de-a928-4729-a172-81d972dcc721"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Alternate Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Debug Controls"",
            ""id"": ""b0ddc170-eae9-4d61-a3f9-3163271d2957"",
            ""actions"": [
                {
                    ""name"": ""Add Ingredients"",
                    ""type"": ""Button"",
                    ""id"": ""7dae2e81-6b0c-46b6-860c-59cb5d97a2fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Subtract Ingredients"",
                    ""type"": ""Button"",
                    ""id"": ""d0ad6bde-0dd3-47ac-850e-8cc03b702336"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5e511a67-4a71-44b5-a0e9-bb5683486461"",
                    ""path"": ""<Keyboard>/numpadPlus"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Add Ingredients"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c902d53-087d-4d7b-8a33-980e2eb897c3"",
                    ""path"": ""<Keyboard>/numpadMinus"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Subtract Ingredients"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI Controls"",
            ""id"": ""fc69f1a3-d14d-4610-98f9-47c5031a9343"",
            ""actions"": [
                {
                    ""name"": ""Resume"",
                    ""type"": ""Button"",
                    ""id"": ""56d6ba8d-addf-4e5d-93ad-9a10cbd72a61"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MenuNavigation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""bccba6ab-c29c-45bd-a2e1-0013739399aa"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""9eeb0958-e5fb-4463-b8c4-c0389ab7f21d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Backout"",
                    ""type"": ""Button"",
                    ""id"": ""e949ab68-37a4-4182-89cb-adc4e563d620"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""be5e3c2b-0a82-4d93-b703-2324a1245bf8"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Resume"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02ceb0ef-2c56-47d5-a0c6-bac7f764d486"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Resume"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e9a2e0ef-702e-4bbd-a474-bdd325204c9f"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Resume"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""8d018fef-4821-441a-8c4c-62d5c978f8ff"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MenuNavigation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1d6631cc-d98b-443a-b7fa-91bd005531ae"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MenuNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6a1b9d74-048c-4003-bfdf-9480e40637ba"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MenuNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""25c15360-c8de-425e-ab8a-5c07f142e9bc"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MenuNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3e4ea86a-4435-46f3-950c-897d98273842"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MenuNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b607db51-f301-4762-b908-5eca148b6957"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MenuNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c21eb64a-1c82-433c-9615-e2435c42b77a"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MenuNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2af4755d-0383-4138-87f1-623d57fdf3c5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MenuNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""78a92f8c-cb1c-4689-8dea-2f3f4cdea256"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MenuNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Joystick"",
                    ""id"": ""60ad857a-7788-4db5-89b5-94a981fb1adb"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MenuNavigation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""729355e4-a1c9-4918-95ca-a27b460cb2f9"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MenuNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""ace86fbe-8e7c-439e-895e-d03477af9dd8"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MenuNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""5afa5237-923d-470e-84f8-32256c3b8956"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MenuNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""2363f5a7-8ace-4277-bc41-eeeb2eac4d62"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MenuNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""5ead486c-526b-4f63-9b4e-36d8f6342618"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MenuNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""e6c281c6-50cb-4bde-a613-125c4779194c"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MenuNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""3d1446d6-ca87-4785-b45c-5bd9962fb261"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MenuNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""6ce34feb-8f29-44ac-988a-9d0cb8e22484"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MenuNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Dpad"",
                    ""id"": ""09d20569-fff2-4268-abec-1ed060680c70"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MenuNavigation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""b10065da-9256-4dbc-a4ba-7759add76eef"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MenuNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""75759f6e-197a-436a-b42d-fdb1578776e3"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MenuNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""40a215ff-5a55-4e2d-b3ea-1b99c808b17b"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MenuNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""6bbe3350-1d2d-4824-bb2e-992eca1fcc58"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MenuNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ec52db59-2d53-43f0-a2c7-6a63690bf3d1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fabdad70-2ac8-4000-8f23-d30c7b9c68a7"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""610712ec-02ac-4e8c-92f2-75d91bec84b8"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d67075ac-249e-4d01-ad08-652f1af1d36c"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Backout"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c187defd-2782-4a34-91c1-727fe8b376ea"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Backout"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Restaurant Controls
        m_RestaurantControls = asset.FindActionMap("Restaurant Controls", throwIfNotFound: true);
        m_RestaurantControls_AreaNavigation = m_RestaurantControls.FindAction("AreaNavigation", throwIfNotFound: true);
        m_RestaurantControls_MainAction = m_RestaurantControls.FindAction("MainAction", throwIfNotFound: true);
        m_RestaurantControls_Pause = m_RestaurantControls.FindAction("Pause", throwIfNotFound: true);
        // Barbershop Controls
        m_BarbershopControls = asset.FindActionMap("Barbershop Controls", throwIfNotFound: true);
        m_BarbershopControls_Newaction = m_BarbershopControls.FindAction("New action", throwIfNotFound: true);
        // Conversation Controls
        m_ConversationControls = asset.FindActionMap("Conversation Controls", throwIfNotFound: true);
        m_ConversationControls_Newaction = m_ConversationControls.FindAction("New action", throwIfNotFound: true);
        // Basic Minigame Controls
        m_BasicMinigameControls = asset.FindActionMap("Basic Minigame Controls", throwIfNotFound: true);
        m_BasicMinigameControls_MousePress = m_BasicMinigameControls.FindAction("Mouse Press", throwIfNotFound: true);
        m_BasicMinigameControls_BasicPress = m_BasicMinigameControls.FindAction("Basic Press", throwIfNotFound: true);
        m_BasicMinigameControls_AlternatePress = m_BasicMinigameControls.FindAction("Alternate Press", throwIfNotFound: true);
        m_BasicMinigameControls_ControllerMovementLeft = m_BasicMinigameControls.FindAction("Controller Movement Left", throwIfNotFound: true);
        m_BasicMinigameControls_ControllerMovementRight = m_BasicMinigameControls.FindAction("Controller Movement Right", throwIfNotFound: true);
        m_BasicMinigameControls_QuitMinigame = m_BasicMinigameControls.FindAction("Quit Minigame", throwIfNotFound: true);
        // Debug Controls
        m_DebugControls = asset.FindActionMap("Debug Controls", throwIfNotFound: true);
        m_DebugControls_AddIngredients = m_DebugControls.FindAction("Add Ingredients", throwIfNotFound: true);
        m_DebugControls_SubtractIngredients = m_DebugControls.FindAction("Subtract Ingredients", throwIfNotFound: true);
        // UI Controls
        m_UIControls = asset.FindActionMap("UI Controls", throwIfNotFound: true);
        m_UIControls_Resume = m_UIControls.FindAction("Resume", throwIfNotFound: true);
        m_UIControls_MenuNavigation = m_UIControls.FindAction("MenuNavigation", throwIfNotFound: true);
        m_UIControls_Confirm = m_UIControls.FindAction("Confirm", throwIfNotFound: true);
        m_UIControls_Backout = m_UIControls.FindAction("Backout", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Restaurant Controls
    private readonly InputActionMap m_RestaurantControls;
    private List<IRestaurantControlsActions> m_RestaurantControlsActionsCallbackInterfaces = new List<IRestaurantControlsActions>();
    private readonly InputAction m_RestaurantControls_AreaNavigation;
    private readonly InputAction m_RestaurantControls_MainAction;
    private readonly InputAction m_RestaurantControls_Pause;
    public struct RestaurantControlsActions
    {
        private @PlayerControls m_Wrapper;
        public RestaurantControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @AreaNavigation => m_Wrapper.m_RestaurantControls_AreaNavigation;
        public InputAction @MainAction => m_Wrapper.m_RestaurantControls_MainAction;
        public InputAction @Pause => m_Wrapper.m_RestaurantControls_Pause;
        public InputActionMap Get() { return m_Wrapper.m_RestaurantControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RestaurantControlsActions set) { return set.Get(); }
        public void AddCallbacks(IRestaurantControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_RestaurantControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RestaurantControlsActionsCallbackInterfaces.Add(instance);
            @AreaNavigation.started += instance.OnAreaNavigation;
            @AreaNavigation.performed += instance.OnAreaNavigation;
            @AreaNavigation.canceled += instance.OnAreaNavigation;
            @MainAction.started += instance.OnMainAction;
            @MainAction.performed += instance.OnMainAction;
            @MainAction.canceled += instance.OnMainAction;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IRestaurantControlsActions instance)
        {
            @AreaNavigation.started -= instance.OnAreaNavigation;
            @AreaNavigation.performed -= instance.OnAreaNavigation;
            @AreaNavigation.canceled -= instance.OnAreaNavigation;
            @MainAction.started -= instance.OnMainAction;
            @MainAction.performed -= instance.OnMainAction;
            @MainAction.canceled -= instance.OnMainAction;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IRestaurantControlsActions instance)
        {
            if (m_Wrapper.m_RestaurantControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRestaurantControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_RestaurantControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RestaurantControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RestaurantControlsActions @RestaurantControls => new RestaurantControlsActions(this);

    // Barbershop Controls
    private readonly InputActionMap m_BarbershopControls;
    private List<IBarbershopControlsActions> m_BarbershopControlsActionsCallbackInterfaces = new List<IBarbershopControlsActions>();
    private readonly InputAction m_BarbershopControls_Newaction;
    public struct BarbershopControlsActions
    {
        private @PlayerControls m_Wrapper;
        public BarbershopControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_BarbershopControls_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_BarbershopControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BarbershopControlsActions set) { return set.Get(); }
        public void AddCallbacks(IBarbershopControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_BarbershopControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BarbershopControlsActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IBarbershopControlsActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IBarbershopControlsActions instance)
        {
            if (m_Wrapper.m_BarbershopControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBarbershopControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_BarbershopControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BarbershopControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BarbershopControlsActions @BarbershopControls => new BarbershopControlsActions(this);

    // Conversation Controls
    private readonly InputActionMap m_ConversationControls;
    private List<IConversationControlsActions> m_ConversationControlsActionsCallbackInterfaces = new List<IConversationControlsActions>();
    private readonly InputAction m_ConversationControls_Newaction;
    public struct ConversationControlsActions
    {
        private @PlayerControls m_Wrapper;
        public ConversationControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_ConversationControls_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_ConversationControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ConversationControlsActions set) { return set.Get(); }
        public void AddCallbacks(IConversationControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_ConversationControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ConversationControlsActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IConversationControlsActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IConversationControlsActions instance)
        {
            if (m_Wrapper.m_ConversationControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IConversationControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_ConversationControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ConversationControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ConversationControlsActions @ConversationControls => new ConversationControlsActions(this);

    // Basic Minigame Controls
    private readonly InputActionMap m_BasicMinigameControls;
    private List<IBasicMinigameControlsActions> m_BasicMinigameControlsActionsCallbackInterfaces = new List<IBasicMinigameControlsActions>();
    private readonly InputAction m_BasicMinigameControls_MousePress;
    private readonly InputAction m_BasicMinigameControls_BasicPress;
    private readonly InputAction m_BasicMinigameControls_AlternatePress;
    private readonly InputAction m_BasicMinigameControls_ControllerMovementLeft;
    private readonly InputAction m_BasicMinigameControls_ControllerMovementRight;
    private readonly InputAction m_BasicMinigameControls_QuitMinigame;
    public struct BasicMinigameControlsActions
    {
        private @PlayerControls m_Wrapper;
        public BasicMinigameControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePress => m_Wrapper.m_BasicMinigameControls_MousePress;
        public InputAction @BasicPress => m_Wrapper.m_BasicMinigameControls_BasicPress;
        public InputAction @AlternatePress => m_Wrapper.m_BasicMinigameControls_AlternatePress;
        public InputAction @ControllerMovementLeft => m_Wrapper.m_BasicMinigameControls_ControllerMovementLeft;
        public InputAction @ControllerMovementRight => m_Wrapper.m_BasicMinigameControls_ControllerMovementRight;
        public InputAction @QuitMinigame => m_Wrapper.m_BasicMinigameControls_QuitMinigame;
        public InputActionMap Get() { return m_Wrapper.m_BasicMinigameControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BasicMinigameControlsActions set) { return set.Get(); }
        public void AddCallbacks(IBasicMinigameControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_BasicMinigameControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BasicMinigameControlsActionsCallbackInterfaces.Add(instance);
            @MousePress.started += instance.OnMousePress;
            @MousePress.performed += instance.OnMousePress;
            @MousePress.canceled += instance.OnMousePress;
            @BasicPress.started += instance.OnBasicPress;
            @BasicPress.performed += instance.OnBasicPress;
            @BasicPress.canceled += instance.OnBasicPress;
            @AlternatePress.started += instance.OnAlternatePress;
            @AlternatePress.performed += instance.OnAlternatePress;
            @AlternatePress.canceled += instance.OnAlternatePress;
            @ControllerMovementLeft.started += instance.OnControllerMovementLeft;
            @ControllerMovementLeft.performed += instance.OnControllerMovementLeft;
            @ControllerMovementLeft.canceled += instance.OnControllerMovementLeft;
            @ControllerMovementRight.started += instance.OnControllerMovementRight;
            @ControllerMovementRight.performed += instance.OnControllerMovementRight;
            @ControllerMovementRight.canceled += instance.OnControllerMovementRight;
            @QuitMinigame.started += instance.OnQuitMinigame;
            @QuitMinigame.performed += instance.OnQuitMinigame;
            @QuitMinigame.canceled += instance.OnQuitMinigame;
        }

        private void UnregisterCallbacks(IBasicMinigameControlsActions instance)
        {
            @MousePress.started -= instance.OnMousePress;
            @MousePress.performed -= instance.OnMousePress;
            @MousePress.canceled -= instance.OnMousePress;
            @BasicPress.started -= instance.OnBasicPress;
            @BasicPress.performed -= instance.OnBasicPress;
            @BasicPress.canceled -= instance.OnBasicPress;
            @AlternatePress.started -= instance.OnAlternatePress;
            @AlternatePress.performed -= instance.OnAlternatePress;
            @AlternatePress.canceled -= instance.OnAlternatePress;
            @ControllerMovementLeft.started -= instance.OnControllerMovementLeft;
            @ControllerMovementLeft.performed -= instance.OnControllerMovementLeft;
            @ControllerMovementLeft.canceled -= instance.OnControllerMovementLeft;
            @ControllerMovementRight.started -= instance.OnControllerMovementRight;
            @ControllerMovementRight.performed -= instance.OnControllerMovementRight;
            @ControllerMovementRight.canceled -= instance.OnControllerMovementRight;
            @QuitMinigame.started -= instance.OnQuitMinigame;
            @QuitMinigame.performed -= instance.OnQuitMinigame;
            @QuitMinigame.canceled -= instance.OnQuitMinigame;
        }

        public void RemoveCallbacks(IBasicMinigameControlsActions instance)
        {
            if (m_Wrapper.m_BasicMinigameControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBasicMinigameControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_BasicMinigameControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BasicMinigameControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BasicMinigameControlsActions @BasicMinigameControls => new BasicMinigameControlsActions(this);

    // Debug Controls
    private readonly InputActionMap m_DebugControls;
    private List<IDebugControlsActions> m_DebugControlsActionsCallbackInterfaces = new List<IDebugControlsActions>();
    private readonly InputAction m_DebugControls_AddIngredients;
    private readonly InputAction m_DebugControls_SubtractIngredients;
    public struct DebugControlsActions
    {
        private @PlayerControls m_Wrapper;
        public DebugControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @AddIngredients => m_Wrapper.m_DebugControls_AddIngredients;
        public InputAction @SubtractIngredients => m_Wrapper.m_DebugControls_SubtractIngredients;
        public InputActionMap Get() { return m_Wrapper.m_DebugControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebugControlsActions set) { return set.Get(); }
        public void AddCallbacks(IDebugControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_DebugControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DebugControlsActionsCallbackInterfaces.Add(instance);
            @AddIngredients.started += instance.OnAddIngredients;
            @AddIngredients.performed += instance.OnAddIngredients;
            @AddIngredients.canceled += instance.OnAddIngredients;
            @SubtractIngredients.started += instance.OnSubtractIngredients;
            @SubtractIngredients.performed += instance.OnSubtractIngredients;
            @SubtractIngredients.canceled += instance.OnSubtractIngredients;
        }

        private void UnregisterCallbacks(IDebugControlsActions instance)
        {
            @AddIngredients.started -= instance.OnAddIngredients;
            @AddIngredients.performed -= instance.OnAddIngredients;
            @AddIngredients.canceled -= instance.OnAddIngredients;
            @SubtractIngredients.started -= instance.OnSubtractIngredients;
            @SubtractIngredients.performed -= instance.OnSubtractIngredients;
            @SubtractIngredients.canceled -= instance.OnSubtractIngredients;
        }

        public void RemoveCallbacks(IDebugControlsActions instance)
        {
            if (m_Wrapper.m_DebugControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDebugControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_DebugControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DebugControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DebugControlsActions @DebugControls => new DebugControlsActions(this);

    // UI Controls
    private readonly InputActionMap m_UIControls;
    private List<IUIControlsActions> m_UIControlsActionsCallbackInterfaces = new List<IUIControlsActions>();
    private readonly InputAction m_UIControls_Resume;
    private readonly InputAction m_UIControls_MenuNavigation;
    private readonly InputAction m_UIControls_Confirm;
    private readonly InputAction m_UIControls_Backout;
    public struct UIControlsActions
    {
        private @PlayerControls m_Wrapper;
        public UIControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Resume => m_Wrapper.m_UIControls_Resume;
        public InputAction @MenuNavigation => m_Wrapper.m_UIControls_MenuNavigation;
        public InputAction @Confirm => m_Wrapper.m_UIControls_Confirm;
        public InputAction @Backout => m_Wrapper.m_UIControls_Backout;
        public InputActionMap Get() { return m_Wrapper.m_UIControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIControlsActions set) { return set.Get(); }
        public void AddCallbacks(IUIControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_UIControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIControlsActionsCallbackInterfaces.Add(instance);
            @Resume.started += instance.OnResume;
            @Resume.performed += instance.OnResume;
            @Resume.canceled += instance.OnResume;
            @MenuNavigation.started += instance.OnMenuNavigation;
            @MenuNavigation.performed += instance.OnMenuNavigation;
            @MenuNavigation.canceled += instance.OnMenuNavigation;
            @Confirm.started += instance.OnConfirm;
            @Confirm.performed += instance.OnConfirm;
            @Confirm.canceled += instance.OnConfirm;
            @Backout.started += instance.OnBackout;
            @Backout.performed += instance.OnBackout;
            @Backout.canceled += instance.OnBackout;
        }

        private void UnregisterCallbacks(IUIControlsActions instance)
        {
            @Resume.started -= instance.OnResume;
            @Resume.performed -= instance.OnResume;
            @Resume.canceled -= instance.OnResume;
            @MenuNavigation.started -= instance.OnMenuNavigation;
            @MenuNavigation.performed -= instance.OnMenuNavigation;
            @MenuNavigation.canceled -= instance.OnMenuNavigation;
            @Confirm.started -= instance.OnConfirm;
            @Confirm.performed -= instance.OnConfirm;
            @Confirm.canceled -= instance.OnConfirm;
            @Backout.started -= instance.OnBackout;
            @Backout.performed -= instance.OnBackout;
            @Backout.canceled -= instance.OnBackout;
        }

        public void RemoveCallbacks(IUIControlsActions instance)
        {
            if (m_Wrapper.m_UIControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_UIControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIControlsActions @UIControls => new UIControlsActions(this);
    public interface IRestaurantControlsActions
    {
        void OnAreaNavigation(InputAction.CallbackContext context);
        void OnMainAction(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IBarbershopControlsActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IConversationControlsActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IBasicMinigameControlsActions
    {
        void OnMousePress(InputAction.CallbackContext context);
        void OnBasicPress(InputAction.CallbackContext context);
        void OnAlternatePress(InputAction.CallbackContext context);
        void OnControllerMovementLeft(InputAction.CallbackContext context);
        void OnControllerMovementRight(InputAction.CallbackContext context);
        void OnQuitMinigame(InputAction.CallbackContext context);
    }
    public interface IDebugControlsActions
    {
        void OnAddIngredients(InputAction.CallbackContext context);
        void OnSubtractIngredients(InputAction.CallbackContext context);
    }
    public interface IUIControlsActions
    {
        void OnResume(InputAction.CallbackContext context);
        void OnMenuNavigation(InputAction.CallbackContext context);
        void OnConfirm(InputAction.CallbackContext context);
        void OnBackout(InputAction.CallbackContext context);
    }
}
