using System.Collections;
using System.Collections.Generic;
using UnityEngine;

#if UNITY_EDITOR
using UnityEditor;
#endif

public class PlateHolder : Interactable
{
    [Space(10)]
    [SerializeField]
    private GameObject m_PlatePrefab;
    public bool m_StartFull = true;

    [SerializeField]
    private int m_MaxPlateCount = 7;
    private Stack<Plate> m_PlatesStacked;
    [SerializeField]
    private Plate.EnumPlateState[] m_RequiredPlateState;

    public ObjectSocket m_DishPos;

    protected override void PlaceOnArea()
    {
        base.PlaceOnArea();

        if (!m_StartFull)
        {
            return;
        }
        m_PlatesStacked = new Stack<Plate>(m_MaxPlateCount);
        for (int i = 0; i < m_MaxPlateCount; ++i)
        {
            StackPlate(Instantiate(m_PlatePrefab).GetComponent<Plate>());
        }
    }

    private void Start()
    {
        PlaceOnArea();
    }

    public bool StackPlate(Plate p_PlateToStack)
    {
        bool PlateStateFits = false;
        foreach (var PlateState in m_RequiredPlateState)
        {
            if (p_PlateToStack.m_PlateState == PlateState)
            {
                PlateStateFits = true;
                break;
            }
        }

        if (!PlateStateFits)
        {
            return false;
        }

        if (m_PlatesStacked.Count >= m_MaxPlateCount)
        {
            return false;
        }

        var SocketToStack = m_PlatesStacked.TryPeek(out var TopPlate) ? TopPlate.m_DishPos : m_DishPos;
        SocketToStack.Stack(p_PlateToStack.transform);
        m_PlatesStacked.Push(p_PlateToStack);

        return true;
    }

    public Plate GrabPlate()
    {
        if (m_PlatesStacked.Count <= 0)
        {
            return null;
        }

        var RetPlate = m_PlatesStacked.Pop();
        var SocketToFree = m_PlatesStacked.TryPeek(out var TopPlate) ? TopPlate.m_DishPos : m_DishPos;
        m_DishPos.

        return m_PlatesStacked.Pop();
    }
}


#region Custom PlateHolder Editor
#if UNITY_EDITOR

[CustomEditor(typeof(PlateHolder))]
[CanEditMultipleObjects]
class PlateHolderEditor : InteractableEditor
{
    private PlateHolder TargetObject_PlateHolder;
    protected override void CustomOnEnable()
    {
        base.CustomOnEnable();
        TargetObject_PlateHolder = (PlateHolder)target;
    }

    private void OnEnable()
    {
        CustomOnEnable();
    }

    public override void OnInspectorGUI()
    {
        if (TargetObject_PlateHolder == null)
        {
            return;
        }

        base.OnInspectorGUI();
    }
}

#endif
#endregion